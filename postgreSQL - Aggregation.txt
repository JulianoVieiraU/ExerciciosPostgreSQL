-Aggregation
1--------------
select count(facid) as count from cd.facilities;

2--------------
select count(facid) as count from cd.facilities where guestcost >= 10;

3--------------
select 
	recommendedby, count(*)
from
	cd.members
where
	recommendedby is not null
group by recommendedby
order by recommendedby;

4--------------
select 
	facid, sum(slots) as slots
from
	cd.bookings
group by facid
order by facid;

5---------------
select 
	facid, sum(slots) as Slots
from
	cd.bookings
where
	starttime between '2012-09-01' and '2012-10-01'
group by facid
order by sum(slots);

6---------------
select 
	facid, extract(month from starttime) as month,  sum(slots) as Slots
from
	cd.bookings
where
	extract(year from starttime) = 2012
group by facid, month
order by facid, month;

7---------------
select
	count(distinct memid) as count
from
	cd.bookings;

8---------------
select
	facid, sum(slots) as slots
from
	cd.bookings
group by facid
having sum(slots) >= 1000
order by facid;

9--------------
select
	f.name, sum(slots *
			case
			   when memid = 0 then f.guestcost
			   else f.membercost
			 end) as revenue 
from
	cd.bookings b inner join cd.facilities f on f.facid = b.facid
	group by f.name
	order by revenue;

10--------------
select
	f.name, sum(slots *
			case
			   when memid = 0 then f.guestcost
			   else f.membercost
			 end) as revenue 
from
	cd.bookings b inner join cd.facilities f on f.facid = b.facid
	group by f.name
having sum(slots *
			case
			   when memid = 0 then f.guestcost
			   else f.membercost
			 end) < 1000
	order by revenue;

11--------------
select 
	facid, sum(slots) as totalslots
from 
	cd.bookings
group by facid
having sum(slots) = (
	select 
		max(sum2.totalslots) 
	from
		(select 
			sum(slots) as totalslots
		from 
			cd.bookings
		group by facid
		) as sum2);

12--------------
select
	facid, extract(month from starttime) as month, sum(slots) as slots
from
	cd.bookings
where
	starttime between '2012-01-01' and '2012-12-31'
group by
	rollup(facid, month)
order by facid, month;

13--------------
select
	f.facid, f.name, trim(to_char(sum(b.slots)* 0.5, '9999D99')) as TotalHours
from
	cd.bookings b inner join cd.facilities f
	on f.facid = b.facid
group by f.facid, f.name
order by f.facid;

14--------------
select
	m.surname, m.firstname, m.memid,  min(b.starttime)
from
	cd.members m inner join cd.bookings b on m.memid = b.memid
where b.starttime > '2012-09-01'
	group by m.surname, m.firstname, m.memid 
	order by m.memid;

15-------------
select
	(select count(memid) from cd.members) as count, firstname, surname
from
	cd.members
	group by firstname, surname, memid
	order by memid;

16-------------
select
	row_number() over (order by joindate) as row_number, firstname, surname
from
	cd.members
	order by joindate;

17-------------
select
	facid, total from(
		select
			facid,  sum(slots) total, rank() over (order by sum(slots) desc) rank
		from cd.bookings
			group by facid
	) as ranked
where rank = 1;

18------------
select firstname, surname,
	((sum(bks.slots)+10)/20)*10 as hours,
	rank() over (order by ((sum(bks.slots)+10)/20)*10 desc) as rank

	from cd.bookings bks
	inner join cd.members mems
		on bks.memid = mems.memid
	group by mems.memid
order by rank, surname, firstname;

19------------
select name, rank from (
	select facs.name as name, rank() over (order by sum(case
				when memid = 0 then slots * facs.guestcost
				else slots * membercost
			end) desc) as rank
		from cd.bookings bks
		inner join cd.facilities facs
			on bks.facid = facs.facid
		group by facs.name
	) as subq
	where rank <= 3
order by rank;

20------------
select name, case when class=1 then 'high'
		when class=2 then 'average'
		else 'low'
		end revenue
	from (
		select facs.name as name, ntile(3) over (order by sum(case
				when memid = 0 then slots * facs.guestcost
				else slots * membercost
			end) desc) as class
		from cd.bookings bks
		inner join cd.facilities facs
			on bks.facid = facs.facid
		group by facs.name
	) as subq
order by class, name;

21-----------
select 	facs.name as name,
	facs.initialoutlay/((sum(case
			when memid = 0 then slots * facs.guestcost
			else slots * membercost
		end)/3) - facs.monthlymaintenance) as months
	from cd.bookings bks
	inner join cd.facilities facs
		on bks.facid = facs.facid
	group by facs.facid
order by name;

22-----------
select 	dategen.date,
	(
		-- correlated subquery that, for each day fed into it,
		-- finds the average revenue for the last 15 days
		select sum(case
			when memid = 0 then slots * facs.guestcost
			else slots * membercost
		end) as rev

		from cd.bookings bks
		inner join cd.facilities facs
			on bks.facid = facs.facid
		where bks.starttime > dategen.date - interval '14 days'
			and bks.starttime < dategen.date + interval '1 day'
	)/15 as revenue
	from
	(
		-- generates a list of days in august
		select 	cast(generate_series(timestamp '2012-08-01',
			'2012-08-31','1 day') as date) as date
	)  as dategen
order by dategen.date;

